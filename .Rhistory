distMatrixSortedByRow[1,1:10]
cut = distMatrixSortedByRow[,k]
cut
distMatrix[1,]
distMatrix[1,1:10]
distMatrixSortedByRow[1,1:10]
max(distMatrix)
source('~/Canon/R/utils.r')
a
nrow(a$emb)
log(991)
predictTimeSeries(createRossler(nop = 3000, onlyts = F, m = 3, tau = 5))
predictTimeSeries(createIkeda(nop = 1000, onlyts = F, m = 3, tau = 5))
predictTimeSeries(createIkeda(nop = 1000, onlyts = F, m = 2, tau = 1))
predictTimeSeries(createLorenz(nop = 1000, onlyts = F, m = 3, tau = 5))
source('~/Canon/R/utils.r')
predictTimeSeries(createLorenz(nop = 1000, onlyts = F, m = 3, tau = 5))
source('~/Canon/R/utils.r')
predictTimeSeries(createLorenz(nop = 1000, onlyts = F, m = 3, tau = 5))
predictTimeSeries(createLorenz(nop = 1000, onlyts = F, m = 3, tau = 10))
predictTimeSeries(createLorenz(nop = 1000, onlyts = F, m = 2, tau = 10))
source('C:/Users/pagliosa/Dropbox/Work/Articles/Estimating Embedding Parameters using Neural Networks/R Codes/mlp.r')
ts = createRossler(); tsTest(ts = ts$ts, dir = ts$name, K = 5, maxM = 3, maxTau = 5, epochs = 500, forgetFactor = 1e-3, uppert = 0.8, lowert = 0.1)
source('C:/Users/pagliosa/Dropbox/Work/Articles/Estimating Embedding Parameters using Neural Networks/R Codes/mlp.r')
ts = createRossler(); tsTest(ts = ts$ts, dir = ts$name, K = 3, maxM = 3, maxTau = 5, epochs = 500, forgetFactor = 1e-3, uppert = 0.8, lowert = 0.1)
debugSource('~/Canon/R/utils.r')
debugSource('~/Canon/R/utils.r')
debugSource('~/Canon/R/utils.r')
debugSource('~/Canon/R/utils.r')
ts = createRossler(); tsTest(ts = ts$ts, dir = ts$name, K = 3, maxM = 3, maxTau = 5, epochs = 500, forgetFactor = 1e-3, uppert = 0.8, lowert = 0.1)
reset()
ts = createRossler(); tsTest(ts = ts$ts, dir = ts$name, K = 3, maxM = 3, maxTau = 5, epochs = 500, forgetFactor = 1e-3, uppert = 0.8, lowert = 0.1)
ts = createRossler(); tsTest(ts = ts$ts, dir = ts$name, K = 3, maxM = 3, maxTau = 5, epochs = 500, forgetFactor = 1e-3, uppert = 0.8, lowert = 0.1)
predictTimeSeries(createLorenz(nop = 1000, onlyts = F, m = 2, tau = 10))
debugSource('~/Canon/R/utils.r')
debugSource('~/Canon/R/utils.r')
predictTimeSeries(createLorenz(nop = 1000, onlyts = F, m = 2, tau = 10))
dataset
testRange
plot(dataset)
points(trainTo)
points(trainTo, col = 2)
trainTo
points(dataset[trainTo:ncol(dataset),], col = 2)
query
as.numeric(dataset[(to - timeDelay), ])
y
y
debugSource('~/Canon/R/utils.r')
predictTimeSeries(createLorenz(nop = 1000, onlyts = F, m = 2, tau = 10))
debugSource('~/Canon/R/utils.r')
predictTimeSeries(createLorenz(nop = 1000, onlyts = F, m = 2, tau = 10))
debugSource('~/Canon/R/utils.r')
predictTimeSeries(createLorenz(nop = 1000, onlyts = F, m = 2, tau = 10))
classId
dist
query
dataset
query
dist
sigma
sigma
w
y
plot(datasaet)
plot(dataset)
state = as.numeric(dataset[(to - timeDelay),])
point(state, col = 2)
points(state, col = 2)
timeDelay
to
nrow(dataset)
to - timeDelay
state
dataset[650:670,]
state
points(state, col = 3)
state
state
points(state[0], state[1], col = 3)
points(state[1], state[2], col = 3)
points(state[1], state[2], col = 2)
debugSource('~/Canon/R/utils.r')
predictTimeSeries(createLorenz(nop = 1000, onlyts = F, m = 2, tau = 10))
plot(datasaet)
plot(dataset)
state = as.numeric(dataset[(to - timeDelay),])
state = as.numeric(dataset[(to - timeDelay),])
points(state[1], state[2], col = 2)
state
trainFrom:(to - 1)
train = dataset[trainFrom:(to - 1),]
points(train, col = 3)
sigma
draw.circle(state[1], state[2], sigma)
nrow(dataset)
log(nrow(dataset)) + 1
to - timeDelay
dataset[650:652,]
predictTimeSeries(createLorenz(nop = 1000, onlyts = F, m = 2, tau = 10))
dist
w
coco = w
sort(coco)
sort(coco, decreasing = F)
sort(coco, decreasing = T)
Y
w * Y
debugSource('~/Canon/R/utils.r')
predictTimeSeries(createLorenz(nop = 1000, onlyts = F, m = 2, tau = 10))
y
debugSource('~/Canon/R/utils.r')
predictTimeSeries(createLorenz(nop = 1000, onlyts = F, m = 2, tau = 10))
sigma
log(nrow(dataset) / 3) + 1
debugSource('~/Canon/R/utils.r')
predictTimeSeries(createLorenz(nop = 1000, onlyts = F, m = 2, tau = 10))
dataset[to,]
to
query
state = as.numeric(dataset[(to - timeDelay),])
state
dataset[to,]
dataset[to,]
y
query
source('~/Canon/R/utils.r')
predictTimeSeries(createLorenz(nop = 1000, onlyts = F, m = 2, tau = 10))
predictTimeSeries(createLorenz(nop = 1000, onlyts = F, m = 3, tau = 10))
predictTimeSeries(createLorenz(nop = 1000, onlyts = F, m = 3, tau = 8))
predictTimeSeries(createLorenz(nop = 1000, onlyts = F, m = 3, tau = 5))
predictTimeSeries(createLorenz(nop = 1000, onlyts = F, m = 3, tau = 2))
predictTimeSeries(createLorenz(nop = 1000, onlyts = F, m = 3, tau = 5))
source('C:/Users/pagliosa/Dropbox/Work/Articles/Estimating Embedding Parameters using Neural Networks/R Codes/mlp.r')
ts = createLogistic(); tsTest(ts = ts$ts, dir = ts$name, K = 1, maxM = 2, maxTau = 1, epochs = 500, forgetFactor = 1e-3, uppert = 0.8, lowert = 0.1)
source('C:/Users/pagliosa/Dropbox/Work/Articles/Estimating Embedding Parameters using Neural Networks/R Codes/mlp.r')
ts = createLogistic(); tsTest(ts = ts$ts, dir = ts$name, K = 1, maxM = 2, maxTau = 1, epochs = 500, forgetFactor = 1e-3, uppert = 0.8, lowert = 0.1)
source('C:/Users/pagliosa/Dropbox/Work/Articles/Estimating Embedding Parameters using Neural Networks/R Codes/mlp.r')
ts = createLogistic(); tsTest(ts = ts$ts, dir = ts$name, K = 1, maxM = 2, maxTau = 1, epochs = 500, forgetFactor = 1e-3, uppert = 0.8, lowert = 0.1)
e(3)
exp(3)
log(20)
log(10)
source('~/Canon/R/utils.r')
source('~/Canon/R/utils.r')
predictTimeSeries(createLorenz(nop = 1000, onlyts = F, m = 3, tau = 5))
debugSource('~/Canon/R/utils.r')
predictTimeSeries(createLorenz(nop = 1000, onlyts = F, m = 3, tau = 5))
debugSource('~/Canon/R/timeSeries.r')
debugSource('~/Canon/R/timeSeries.r')
debugSource('~/Canon/R/utils.r')
predictTimeSeries(createLorenz(nop = 1000, onlyts = F, m = 3, tau = 5))
source('~/Canon/R/timeSeries.r')
predictTimeSeries(createLorenz(nop = 1000, onlyts = F, m = 3, tau = 5))
predictTimeSeries(createLorenz(nop = 1000, onlyts = F, m = 3, tau = 5, window = 1))
predictTimeSeries(createLorenz(nop = 1000, onlyts = F, m = 3, tau = 5), window = 1)
predictTimeSeries(createLorenz(nop = 1000, onlyts = F, m = 3, tau = 5), window = 3)
predictTimeSeries(createLorenz(nop = 1000, onlyts = F, m = 3, tau = 5), window = 3)
sigma
plot(dataset)
query
points(query[1], querty[2], col = 2)
points(query[1], query[2], col = 2)
circle(query[1], query[2], sigma)
circle(query[1], query[2], sigma)
draw.circle(query[1], query[2], sigma)
y
predictTimeSeries(createLorenz(nop = 1000, onlyts = F, m = 3, tau = 5, window = 10))
predictTimeSeries(createLorenz(nop = 1000, onlyts = F, m = 3, tau = 5))
source('~/Canon/R/utils.r')
source('~/Canon/R/utils.r')
source('~/Canon/R/utils.r')
predictTimeSeries(createLorenz(nop = 1000, onlyts = F, m = 3, tau = 5), recursive = F)
source('~/Canon/R/timeSeries.r')
predictTimeSeries(createLorenz(nop = 1000, onlyts = F, m = 3, tau = 5), recursive = F)
source('~/Canon/R/utils.r')
predictTimeSeries(createLorenz(nop = 1000, onlyts = F, m = 3, tau = 5), recursive = F)
predictTimeSeries(createLorenz(nop = 1000, onlyts = F, m = 3, tau = 15), recursive = F)
source('C:/Users/pagliosa/Dropbox/Work/Articles/Estimating Embedding Parameters using Neural Networks/R Codes/mlp.r')
ts = createLogistic(); tsTest(ts = ts$ts, dir = ts$name, K = 1, maxM = 2, maxTau = 1, epochs = 500, forgetFactor = 1e-3, uppert = 0.8, lowert = 0.1)
source('C:/Users/pagliosa/Dropbox/Work/Articles/Estimating Embedding Parameters using Neural Networks/R Codes/mlp.r')
source('C:/Users/pagliosa/Dropbox/Work/Articles/Estimating Embedding Parameters using Neural Networks/R Codes/mlp.r')
ts = createLogistic(); tsTest(ts = ts$ts, dir = ts$name, K = 1, maxM = 2, maxTau = 1, epochs = 500, forgetFactor = 1e-3, uppert = 0.8, lowert = 0.1)
ts = createLogistic(); tsTest(ts = ts$ts, dir = ts$name, K = 1, maxM = 2, maxTau = 1, epochs = 500, forgetFactor = 1e-3, uppert = 0.8, lowert = 0.1)
vec.o_p
vec.o_p
vec.y_p
euclidean(vec.o_p, vec.y_p)
source('C:/Users/pagliosa/Dropbox/Work/Articles/Estimating Embedding Parameters using Neural Networks/R Codes/mlp.r')
ts = createLogistic(); tsTest(ts = ts$ts, dir = ts$name, K = 1, maxM = 2, maxTau = 1, epochs = 500, forgetFactor = 1e-3, uppert = 0.8, lowert = 0.1)
debugSource('C:/Users/pagliosa/Dropbox/Work/Articles/Estimating Embedding Parameters using Neural Networks/R Codes/mlp.r')
ts = createLogistic(); tsTest(ts = ts$ts, dir = ts$name, K = 1, maxM = 2, maxTau = 1, epochs = 500, forgetFactor = 1e-3, uppert = 0.8, lowert = 0.1)
euclidean(vec.y_p, vec.o_p)
source('C:/Users/pagliosa/Dropbox/Work/Articles/Estimating Embedding Parameters using Neural Networks/R Codes/mlp.r')
ts = createRossler(); tsTest(ts = ts$ts, dir = ts$name, K = 3, maxM = 3, maxTau = 5, epochs = 500, forgetFactor = 1e-3, uppert = 0.8, lowert = 0.1, recursive = T)
debugSource('C:/Users/pagliosa/Dropbox/Work/Articles/Estimating Embedding Parameters using Neural Networks/R Codes/mlp.r')
ts = createRossler(); tsTest(ts = ts$ts, dir = ts$name, K = 3, maxM = 3, maxTau = 5, epochs = 500, forgetFactor = 1e-3, uppert = 0.8, lowert = 0.1, recursive = T)
ts = createRossler(); tsTest(ts = ts$ts, dir = ts$name, K = 3, maxM = 3, maxTau = 5, epochs = 5, forgetFactor = 1e-3, uppert = 0.8, lowert = 0.1, recursive = T)
trainTo
N
dataset
N
nrow(dataset)
N
ts = createRossler(); tsTest(ts = ts$ts, dir = ts$name, K = 3, maxM = 3, maxTau = 5, epochs = 5, forgetFactor = 1e-3, uppert = 0.8, lowert = 0.1, recursive = T)
N
source('C:/Users/pagliosa/Dropbox/Work/Articles/Estimating Embedding Parameters using Neural Networks/R Codes/mlp.r')
ts = createRossler(); tsTest(ts = ts$ts, dir = ts$name, K = 3, maxM = 3, maxTau = 5, epochs = 500, forgetFactor = 1e-3, uppert = 0.8, lowert = 0.1, recursive = T)
source('~/Canon/R/utils.r')
predictTimeSeries(createLorenz(nop = 1000, onlyts = F, m = 3, tau = 5), recursive = F)
source('~/Canon/R/utils.r')
predictTimeSeries(createLorenz(nop = 1000, onlyts = F, m = 3, tau = 5), recursive = F)
source('~/Canon/R/utils.r')
source('~/Canon/R/utils.r')
source('~/Canon/R/utils.r')
predictTimeSeries(createLorenz(nop = 1000, onlyts = F, m = 3, tau = 5), recursive = F)7
predictTimeSeries(createLorenz(nop = 1000, onlyts = F, m = 3, tau = 5), recursive = F)
predictTimeSeries(createLorenz(nop = 1000, onlyts = F, m = 3, tau = 5), recursive = T)
source('~/Canon/R/utils.r')
ret = predictTimeSeries(createLorenz(nop = 1000, onlyts = F, m = 3, tau = 5), recursive = T)
nrow(ret$originalDataset)
nrow(ret$predictedDataset)
ret = predictTimeSeries(createLorenz(nop = 5000, onlyts = F, m = 3, tau = 5), recursive = T)
ret = predictTimeSeries(createRossler(nop = 2000, onlyts = F, m = 3, tau = 5), recursive = T)
source('C:/Users/pagliosa/Dropbox/Work/Articles/Estimating Embedding Parameters using Neural Networks/R Codes/mlp.r')
ts = createLogistic(); tsTest(ts = ts$ts, dir = ts$name, K = 1, maxM = 3, maxTau = 5, epochs = 500, forgetFactor = 1e-3, uppert = 0.8, lowert = 0.1, recursive = T)
source('C:/Users/pagliosa/Dropbox/Work/Articles/Estimating Embedding Parameters using Neural Networks/R Codes/mlp.r')
source('C:/Users/pagliosa/Dropbox/Work/Articles/Estimating Embedding Parameters using Neural Networks/R Codes/mlp.r')
ts = createRossler(); tsTest(ts = ts$ts, dir = ts$name, K = 1, maxM = 3, maxTau = 5, epochs = 500, forgetFactor = 1e-3, uppert = 0.8, lowert = 0.1, recursive = T)
predictTimeSeries(createRossler(nop = 1000, onlyts = F, m = 3, tau = 5), recursive = T)
source('C:/Users/pagliosa/Dropbox/Work/Articles/Estimating Embedding Parameters using Neural Networks/R Codes/mlp.r')
ts = createRossler(); tsTest(ts = ts$ts, dir = ts$name, K = 1, maxM = 3, maxTau = 5, epochs = 500, forgetFactor = 1e-3, uppert = 0.8, lowert = 0.1, recursive = T)
ts = createRossler(3000); tsTest(ts = ts$ts, dir = ts$name, K = 1, maxM = 3, maxTau = 5, epochs = 500, forgetFactor = 1e-3, uppert = 0.8, lowert = 0.1, recursive = T)
source('C:/Users/pagliosa/Dropbox/Work/Articles/Estimating Embedding Parameters using Neural Networks/R Codes/mlp.r')
ts = createRossler(3000); tsTest(ts = ts$ts, dir = ts$name, K = 1, maxM = 3, maxTau = 5, epochs = 500, forgetFactor = 1e-3, uppert = 0.8, lowert = 0.1, recursive = T)
ts = createRossler(3000); tsTest(ts = ts$ts, dir = ts$name, K = 5, maxM = 4, maxTau = 5, epochs = 500, forgetFactor = 1e-3, uppert = 0.8, lowert = 0.1, recursive = F)
ts = createRossler(3000); tsTest(ts = ts$ts, dir = ts$name, K = 5, maxM = 4, maxTau = 5, epochs = 500, forgetFactor = 1e-3, uppert = 0.8, lowert = 0.1, recursive = T)
predictTimeSeries(createRossler(nop = 1000, onlyts = F, m = 3, tau = 5), recursive = T)
source('~/Canon/R/utils.r')
predictTimeSeries(createRossler(nop = 1000, onlyts = F, m = 3, tau = 5), recursive = T)
source('~/Canon/R/utils.r')
source('~/Canon/R/utils.r')
predictTimeSeries(createRossler(nop = 1000, onlyts = F, m = 3, tau = 5), recursive = T)
source('~/Canon/R/utils.r')
predictTimeSeries(createRossler(nop = 1000, onlyts = F, m = 3, tau = 5), recursive = T)
debugSource('C:/Users/pagliosa/Dropbox/Work/Articles/Estimating Embedding Parameters using Neural Networks/R Codes/mlp.r')
ts = createRossler(3000); tsTest(ts = ts$ts, dir = ts$name, K = 5, maxM = 4, maxTau = 5, epochs = 500, forgetFactor = 1e-3, uppert = 0.8, lowert = 0.1, recursive = T)
trainTo
nos * sampleSize
trainingSample
dataset[trainTo + 1,]
trainTo
dataset[2240 + 1,]
length((trainTo + 1):nrow(foldDataset))
ts = createRossler(1000); tsTest(ts = ts$ts, dir = ts$name, K = 5, maxM = 4, maxTau = 5, epochs = 500, forgetFactor = 1e-3, uppert = 0.8, lowert = 0.1, recursive = T)
ts = createRossler(1000); tsTest(ts = ts$ts, dir = ts$name, K = 5, maxM = 4, maxTau = 5, epochs = 500, forgetFactor = 1e-3, uppert = 0.8, lowert = 0.1, recursive = T)
debugSource('C:/Users/pagliosa/Dropbox/Work/Articles/Estimating Embedding Parameters using Neural Networks/R Codes/mlp.r')
ts = createRossler(1000); tsTest(ts = ts$ts, dir = ts$name, K = 5, maxM = 4, maxTau = 5, epochs = 500, forgetFactor = 1e-3, uppert = 0.8, lowert = 0.1, recursive = T)
(trainTo + 1):nrow(foldDataset)
nos
sapleSize
sampleSize
(trainTo + 1):nrow(foldDataset)
nos
(trainTo + 1):nrow(foldDataset)
sampleSize
debugSource('~/Canon/R/utils.r')
debugSource('~/Canon/R/utils.r')
debugSource('~/Canon/R/utils.r')
reset()
debugSource('~/Canon/R/utils.r')
debugSource('~/Canon/R/utils.r')
library("Canon", lib.loc="~/R/win-library/3.3")
detach("package:Canon", unload=TRUE)
source('~/Canon/R/utils.r')
debugSource('~/Canon/R/utils.r')
a = createRossler(onlyts = F)
nrow(a$emb)
ts = createRossler(1000)
nrow(a$emb)
debugSource('C:/Users/pagliosa/Dropbox/Work/Articles/Estimating Embedding Parameters using Neural Networks/R Codes/mlp.r')
ts = createRossler(1000); tsTest(ts = ts$ts, dir = ts$name, K = 5, maxM = 4, maxTau = 5, epochs = 500, forgetFactor = 1e-3, uppert = 0.8, lowert = 0.1, recursive = T)
nos
maxM
maxTau
datasetdim())
dim(dataset)
debugSource('C:/Users/pagliosa/Dropbox/Work/Articles/Estimating Embedding Parameters using Neural Networks/R Codes/mlp.r')
ts = createRossler(1000); tsTest(ts = ts$ts, dir = ts$name, K = 5, maxM = 4, maxTau = 5, epochs = 500, forgetFactor = 1e-3, uppert = 0.8, lowert = 0.1, recursive = T)
dataset[980:nrow(dataset),]
ts
pevFormat(ts$ts, 2, 1)
dim(pevFormat(ts$ts, 2, 1))
a = pevFormat(ts$ts, 2, 1)
a
a[900:1000,]
a = pevFormat(ts$ts, 2, 1)
a = pevFormat(ts$ts, 2, 1)
length(series)
dim(pevFormat(ts$ts, 2, 1))
dim(embed(ts$ts, 2, 1))
dim(embedd(ts$ts, 2, 1))
debugSource('~/Canon/R/utils.r')
reset()
predictTimeSeries(createRossler(nop = 1000, onlyts = F, m = 3, tau = 5), recursive = T)
ts = createRossler(1000); tsTest(ts = ts$ts, dir = ts$name, K = 1, maxM = 4, maxTau = 5, epochs = 500, forgetFactor = 1e-3, uppert = 0.8, lowert = 0.1, recursive = T)
source('C:/Users/pagliosa/Dropbox/Work/Articles/Estimating Embedding Parameters using Neural Networks/R Codes/mlp.r')
ts = createRossler(1000); tsTest(ts = ts$ts, dir = ts$name, K = 1, maxM = 4, maxTau = 5, epochs = 500, forgetFactor = 1e-3, uppert = 0.8, lowert = 0.1, recursive = T)
ts = createRossler(1000); tsTest(ts = ts$ts, dir = ts$name, K = 1, maxM = 4, maxTau = 5, epochs = 500, forgetFactor = 1e-3, uppert = 0.8, lowert = 0.1, recursive = T)
source('C:/Users/pagliosa/Dropbox/Work/Articles/Estimating Embedding Parameters using Neural Networks/R Codes/mlp.r')
source('C:/Users/pagliosa/Dropbox/Work/Articles/Estimating Embedding Parameters using Neural Networks/R Codes/mlp.r')
ts = createRossler(1000); tsTest(ts = ts$ts, dir = ts$name, K = 1, maxM = 4, maxTau = 5, epochs = 500, forgetFactor = 1e-3, uppert = 0.8, lowert = 0.1, recursive = T)
source('C:/Users/pagliosa/Dropbox/Work/Articles/Estimating Embedding Parameters using Neural Networks/R Codes/mlp.r')
debugSource('C:/Users/pagliosa/Dropbox/Work/Articles/Estimating Embedding Parameters using Neural Networks/R Codes/mlp.r')
ts = createRossler(1000); tsTest(ts = ts$ts, dir = ts$name, K = 1, maxM = 4, maxTau = 5, epochs = 500, forgetFactor = 1e-3, uppert = 0.8, lowert = 0.1, recursive = T)
nod
ts = createLogistic(1000, noise = 0.1); tsTest(ts = ts$ts, dir = ts$name, K = 5, maxM = 4, maxTau = 5, epochs = 500, forgetFactor = 1e-3, uppert = 0.8, lowert = 0.1, recursive = F)
ts = createLogistic(1000, noise = 0.2); tsTest(ts = ts$ts, dir = ts$name, K = 5, maxM = 4, maxTau = 5, epochs = 500, forgetFactor = 1e-3, uppert = 0.8, lowert = 0.1, recursive = F)
ts = createLorenz(1000) + rnorm(length(ts$ts), 0.2, noise); plot(ts); tsTest(ts = ts$ts, dir = ts$name, K = 5, maxM = 4, maxTau = 5, epochs = 500, forgetFactor = 1e-3, uppert = 0.8, lowert = 0.1, recursive = F)
ts = createLorenz(1000) + rnorm(length(ts$ts), 0, 0.2); plot(ts); tsTest(ts = ts$ts, dir = ts$name, K = 5, maxM = 4, maxTau = 5, epochs = 500, forgetFactor = 1e-3, uppert = 0.8, lowert = 0.1, recursive = F)
ts = createLorenz(1000) + rnorm(length(ts), 0, 0.2); plot(ts); tsTest(ts = ts$ts, dir = ts$name, K = 5, maxM = 4, maxTau = 5, epochs = 500, forgetFactor = 1e-3, uppert = 0.8, lowert = 0.1, recursive = F)
ts = createLorenz(1000) + rnorm(length(ts$ts), 0, 0.2); plot(ts); tsTest(ts = ts$ts, dir = ts$name, K = 5, maxM = 4, maxTau = 5, epochs = 500, forgetFactor = 1e-3, uppert = 0.8, lowert = 0.1, recursive = F)
rnorm(length(ts))
rnorm(length(ts), 0, 0.2)
length(ts$ts)
rnorm(length(ts$ts), 0, 0.2)
ts = createLorenz(1000); + ts$ts = ts$ts + rnorm(length(ts$ts), 0, 0.2); plot(ts); tsTest(ts = ts$ts, dir = ts$name, K = 5, maxM = 4, maxTau = 5, epochs = 500, forgetFactor = 1e-3, uppert = 0.8, lowert = 0.1, recursive = F)
ts = createLorenz(1000); ts$ts = ts$ts + rnorm(length(ts$ts), 0, 0.2); plot(ts); tsTest(ts = ts$ts, dir = ts$name, K = 5, maxM = 4, maxTau = 5, epochs = 500, forgetFactor = 1e-3, uppert = 0.8, lowert = 0.1, recursive = F)
ts = createLorenz(1000); ts$ts = ts$ts + rnorm(length(ts$ts), 0, 0.2); plot(ts$ts); tsTest(ts = ts$ts, dir = ts$name, K = 5, maxM = 4, maxTau = 5, epochs = 500, forgetFactor = 1e-3, uppert = 0.8, lowert = 0.1, recursive = F)
ts = createLorenz(1000); ts$ts = ts$ts + rnorm(length(ts$ts), 0, 0.5); plot(ts$ts); tsTest(ts = ts$ts, dir = ts$name, K = 5, maxM = 4, maxTau = 5, epochs = 500, forgetFactor = 1e-3, uppert = 0.8, lowert = 0.1, recursive = F)
?norm
?rnorm
ts = createLorenz(1000); ts$ts = ts$ts + rnorm(length(ts$ts), 0, 2); plot(ts$ts); tsTest(ts = ts$ts, dir = ts$name, K = 5, maxM = 4, maxTau = 5, epochs = 500, forgetFactor = 1e-3, uppert = 0.8, lowert = 0.1, recursive = F)
plot(rnorm(1000, 0, 0.2))
histogram(rnorm(1000, 0, 0.2))
ts = createLorenz(1000); ts$ts = ts$ts + rnorm(length(ts$ts), 0, 1); plot(ts$ts); tsTest(ts = ts$ts, dir = ts$name, K = 5, maxM = 4, maxTau = 5, epochs = 500, forgetFactor = 1e-3, uppert = 0.8, lowert = 0.1, recursive = F)
ts = createLorenz(1000); ts$ts = ts$ts + rnorm(length(ts$ts), 0, 4); plot(ts$ts); tsTest(ts = ts$ts, dir = ts$name, K = 5, maxM = 4, maxTau = 5, epochs = 500, forgetFactor = 1e-3, uppert = 0.8, lowert = 0.1, recursive = F)
ts = createRossler(2000); tsTest(ts = ts$ts, dir = ts$name, K = 2, maxM = 4, maxTau = 5, epochs = 3000, forgetFactor = 1e-3, uppert = 0.8, lowert = 0.1, recursive = T)
ts = createRossler(1000); tsTest(ts = ts$ts, dir = ts$name, K = 1, maxM = 4, maxTau = 5, epochs = 3000, forgetFactor = 1e-3, uppert = 0.8, lowert = 0.1, recursive = F)
ts = createRossler(1000); tsTest(ts = ts$ts, dir = ts$name, K = 1, maxM = 4, maxTau = 5, epochs = 500, forgetFactor = 1e-3, uppert = 0.8, lowert = 0.1, recursive = F)
createLorenz(timeInc = 0.2, onlyts = F, plot = T)
createLorenz(timeInc = 0.02, onlyts = F, plot = T)
createLorenz(timeInc = 0.01, onlyts = F, plot = T)
source('~/Canon/R/timeSeries.r')
createLorenz(timeInc = 0.01, onlyts = F, plot = T)
createLorenz(timeInc = 0.21, onlyts = F, plot = T)
createLorenz(timeInc = 0.02, onlyts = F, plot = T)
createLorenz(timeInc = 0.03, onlyts = F, plot = T)
sample(1:10, 5)
createLorenz(onlyts = F, plot = T, timeInc = 0.01)
source('~/Canon/R/timeSeries.r')
createLorenz(onlyts = F, plot = T, timeInc = 0.01)
createLorenz(onlyts = F, plot = T, timeInc = 0.02)
ret = createLorenz(nop = 2000, onlyts = F, plot = T, timeInc = 0.02)
ret = createLorenz(nop = 2000, onlyts = F, plot = T, timeInc = 0.05)
ret = createLorenz(nop = 2000, onlyts = F, plot = T, timeInc = 0.01)
debugSource('C:/Users/pagliosa/Dropbox/Work/Articles/Estimating Embedding Parameters using Neural Networks/R Codes/mlp.r')
ts = createRossler(1000); tsTest(ts = ts$ts, dir = ts$name, K = 1, maxM = 4, maxTau = 5, epochs = 500, forgetFactor = 1e-3, uppert = 0.8, lowert = 0.1, recursive = F)
recursive
run$o_p
y_p
p
run$o_p
p
run$o_p
run$o_p
p
ts = createRossler(1000); tsTest(ts = ts$ts, dir = ts$name, K = 1, maxM = 4, maxTau = 5, epochs = 500, forgetFactor = 1e-3, uppert = 0.8, lowert = 0.1, recursive = T)
debugSource('~/Canon/R/utils.r')
predictTimeSeries(createRossler(nop = 1000, onlyts = F, m = 3, tau = 5), recursive = T)
to
ret = predictTimeSeries(createRossler(nop = 1000, onlyts = F, m = 3, tau = 5), recursive = T)
source('~/Canon/R/timeSeries.r')
a = createRossler(plot = T)
a = createRossler(plot = T, normalize = T)
source('~/Canon/R/timeSeries.r')
a = createRossler(plot = T, normalize = T)
predictTimeSeries(createRossler(nop = 1000, onlyts = F, m = 3, tau = 5), recursive = T)
reset()
predictTimeSeries(createRossler(nop = 1000, onlyts = F, m = 3, tau = 5, normalize = T), recursive = T)
ts = createRossler(1000); tsTest(ts = ts$ts, dir = ts$name, K = 1, maxM = 4, maxTau = 5, epochs = 500, forgetFactor = 1e-3, uppert = 0.8, lowert = 0.1, recursive = T)
source('C:/Users/pagliosa/Dropbox/Work/Articles/Estimating Embedding Parameters using Neural Networks/R Codes/mlp.r')
ts = createRossler(1000); tsTest(ts = ts$ts, dir = ts$name, K = 1, maxM = 4, maxTau = 5, epochs = 500, forgetFactor = 1e-3, uppert = 0.8, lowert = 0.1, recursive = T)
ts = createRossler(1000); tsTest(ts = ts$ts, dir = ts$name, K = 1, maxM = 4, maxTau = 5, epochs = 500, forgetFactor = 1e-3, uppert = 0.8, lowert = 0.1, recursive = F)
ts = createRossler(1000); tsTest(ts = ts$ts, dir = ts$name, K = 5, maxM = 4, maxTau = 5, epochs = 500, forgetFactor = 1e-3, uppert = 0.8, lowert = 0.1, recursive = F)
ts = createRossler(1000); tsTest(ts = ts$ts, dir = ts$name, K = 5, maxM = 4, maxTau = 5, epochs = 500, forgetFactor = 1e-3, uppert = 0.8, lowert = 0.1, test = F)
source('C:/Users/pagliosa/Dropbox/Work/Articles/Estimating Embedding Parameters using Neural Networks/R Codes/mlp.r')
ts = createRossler(1000); tsTest(ts = ts$ts, dir = ts$name, K = 1, maxM = 4, maxTau = 5, epochs = 500, forgetFactor = 1e-3, uppert = 0.8, lowert = 0.1, test = F)
debugSource('C:/Users/pagliosa/Dropbox/Work/Articles/Estimating Embedding Parameters using Neural Networks/R Codes/mlp.r')
debugSource('C:/Users/pagliosa/Dropbox/Work/Articles/Estimating Embedding Parameters using Neural Networks/R Codes/mlp.r')
ts = createRossler(1000); tsTest(ts = ts$ts, dir = ts$name, K = 1, maxM = 4, maxTau = 5, epochs = 500, forgetFactor = 1e-3, uppert = 0.8, lowert = 0.1, test = F)
nod
nos
source('C:/Users/pagliosa/Dropbox/Work/Articles/Estimating Embedding Parameters using Neural Networks/R Codes/mlp.r')
source('C:/Users/pagliosa/Dropbox/Work/Articles/Estimating Embedding Parameters using Neural Networks/R Codes/mlp.r')
ts = createRossler(1000); tsTest(ts = ts$ts, dir = ts$name, K = 1, maxM = 4, maxTau = 5, epochs = 500, forgetFactor = 1e-3, uppert = 0.8, lowert = 0.1, test = F)
source('C:/Users/pagliosa/Dropbox/Work/Articles/Estimating Embedding Parameters using Neural Networks/R Codes/mlp.r')
ts = createRossler(1000); tsTest(ts = ts$ts, dir = ts$name, K = 1, maxM = 4, maxTau = 5, epochs = 500, forgetFactor = 1e-3, uppert = 0.8, lowert = 0.1, test = F)
source('C:/Users/pagliosa/Dropbox/Work/Articles/Estimating Embedding Parameters using Neural Networks/R Codes/mlp.r')
ts = createRossler(1000); tsTest(ts = ts$ts, dir = ts$name, K = 1, maxM = 4, maxTau = 5, epochs = 500, forgetFactor = 1e-3, uppert = 0.8, lowert = 0.1, test = T)
source('C:/Users/pagliosa/Dropbox/Work/Articles/Estimating Embedding Parameters using Neural Networks/R Codes/mlp.r')
ts = createRossler(1000); tsTest(ts = ts$ts, dir = ts$name, K = 1, maxM = 4, maxTau = 5, epochs = 500, forgetFactor = 1e-3, uppert = 0.8, lowert = 0.1, test = T)
source('C:/Users/pagliosa/Dropbox/Work/Articles/Estimating Embedding Parameters using Neural Networks/R Codes/mlp.r')
ts = createRossler(1000); tsTest(ts = ts$ts, dir = ts$name, K = 1, maxM = 4, maxTau = 5, epochs = 500, forgetFactor = 1e-3, uppert = 0.8, lowert = 0.1, recursive = F)
clearPlots()
source('C:/Users/pagliosa/Dropbox/Work/Articles/Estimating Embedding Parameters using Neural Networks/R Codes/mlp.r')
ts = createRossler(1000); tsTest(ts = ts$ts, dir = ts$name, K = 1, maxM = 4, maxTau = 5, epochs = 500, forgetFactor = 1e-3, uppert = 0.8, lowert = 0.1, recursive = F)
ts = createRossler(1000); tsTest(ts = ts$ts, dir = ts$name, K = 1, maxM = 4, maxTau = 5, epochs = 50, forgetFactor = 1e-3, uppert = 0.8, lowert = 0.1, recursive = F)
ts = createRossler(1000); tsTest(ts = ts$ts, dir = ts$name, K = 1, maxM = 4, maxTau = 5, epochs = 5, forgetFactor = 1e-3, uppert = 0.8, lowert = 0.1, recursive = F)
foldDataset
testSample
x_p
p - maxTau
nrow(testSample)
maxTau
source('C:/Users/pagliosa/Dropbox/Work/Articles/Estimating Embedding Parameters using Neural Networks/R Codes/mlp.r')
ts = createRossler(1000); tsTest(ts = ts$ts, dir = ts$name, K = 1, maxM = 4, maxTau = 5, epochs = 5, forgetFactor = 1e-3, uppert = 0.8, lowert = 0.1, recursive = F)
ts = createRossler(1000); tsTest(ts = ts$ts, dir = ts$name, K = 1, maxM = 4, maxTau = 5, epochs = 500, forgetFactor = 1e-3, uppert = 0.8, lowert = 0.1, recursive = F)
source('C:/Users/pagliosa/Dropbox/Work/Articles/Estimating Embedding Parameters using Neural Networks/R Codes/mlp.r')
ts = createRossler(1000); tsTest(ts = ts$ts, dir = ts$name, K = 1, maxM = 4, maxTau = 5, epochs = 500, forgetFactor = 1e-3, uppert = 0.8, lowert = 0.1, recursive = F)
source('C:/Users/pagliosa/Dropbox/Work/Articles/Estimating Embedding Parameters using Neural Networks/R Codes/mlp.r')
ts = createRossler(1000); tsTest(ts = ts$ts, dir = ts$name, K = 1, maxM = 4, maxTau = 5, epochs = 500, forgetFactor = 1e-3, uppert = 0.8, lowert = 0.1, recursive = F)
ts = createRossler(1000); tsTest(ts = ts$ts, dir = ts$name, K = 1, maxM = 4, maxTau = 5, epochs = 500, forgetFactor = 1e-3, uppert = 0.8, lowert = 0.1, recursive = T)
source('C:/Users/pagliosa/Dropbox/Work/Articles/Estimating Embedding Parameters using Neural Networks/R Codes/mlp.r')
ts = createRossler(1000); tsTest(ts = ts$ts, dir = ts$name, K = 1, maxM = 4, maxTau = 5, epochs = 500, forgetFactor = 1e-3, uppert = 0.8, lowert = 0.1, recursive = T)
source('C:/Users/pagliosa/Dropbox/Work/Articles/Estimating Embedding Parameters using Neural Networks/R Codes/mlp.r')
clearPlots()
ts = createRossler(1000); tsTest(ts = ts$ts, dir = ts$name, K = 1, maxM = 4, maxTau = 5, epochs = 500, forgetFactor = 1e-3, uppert = 0.8, lowert = 0.1, recursive = T, random = F)
ts = createRossler(1000); tsTest(ts = ts$ts, dir = ts$name, K = 1, maxM = 4, maxTau = 5, epochs = 500, forgetFactor = 1e-3, uppert = 0.8, lowert = 0.1, recursive = F, random = F)
source('~/Canon/R/timeSeries.r')
a = createLorenz(plot = T)
a = createLorenz(plot = T, noise = 2)
ts = createLorenz(1000, timeInc = 0.02); tsTest(ts = ts$ts, dir = ts$name, K = 1, maxM = 4, maxTau = 5, epochs = 500, forgetFactor = 1e-3, uppert = 0.8, lowert = 0.1, recursive = F, random = F)
ts = createLorenz(1000, timeInc = 0.04); tsTest(ts = ts$ts, dir = ts$name, K = 1, maxM = 4, maxTau = 5, epochs = 500, forgetFactor = 1e-3, uppert = 0.8, lowert = 0.1, recursive = F, random = F)
a = createLorenz(plot = T, timeInc = 0.01)
a = createLorenz(plot = T, timeInc = 0.01, onlyts = F)
a = createLorenz(plot = T, timeInc = 0.02, onlyts = F)
a = createLorenz(plot = T, timeInc = 0.05, onlyts = F)
a = createRossler(plot = T, timeInc = 0.05, onlyts = F)
source('~/Canon/R/timeSeries.r')
a = createRossler(plot = T, timeInc = 0.01, onlyts = F)
a = createRossler(plot = T, timeInc = 0.02, onlyts = F)
a = createRossler(plot = T, timeInc = 0.03, onlyts = F)
a = createRossler(plot = T, timeInc = 0.4, onlyts = F)
source('~/Canon/R/timeSeries.r')
a = createRossler(plot = T, timeInc = 0.4, onlyts = F)
a = createRossler(plot = T, timeInc = 4, onlyts = F)
?rossler
debugSource('~/Canon/R/timeSeries.r')
a = createRossler(plot = T, timeInc = 4, onlyts = F)
seq(0, timeInc * (nop - 1), by = timeInc)
timeInc = 0.01; plot(seq(0, timeInc * (nop - 1), by = timeInc))
timeInc = 0.02; plot(seq(0, timeInc * (nop - 1), by = timeInc))
rossler(a = alpha, b = beta, w = gamma, start = c(-2, -10, 0.2), time = seq(0,50,by = 0.01), do.plot = T)
a = rossler(a = alpha, b = beta, w = gamma, start = c(-2, -10, 0.2), time = seq(0,50,by = 0.02), do.plot = T)
a = rossler(a = alpha, b = beta, w = gamma, start = c(-2, -10, 0.2), time = seq(0,50,by = 0.05), do.plot = T)
a = rossler(mop = 2000, a = alpha, b = beta, w = gamma, start = c(-2, -10, 0.2), time = seq(0,50,by = 0.02), do.plot = T)
a = rossler(nop = 2000, a = alpha, b = beta, w = gamma, start = c(-2, -10, 0.2), time = seq(0,50,by = 0.02), do.plot = T)
a = rossler(nop = 2000, a = alpha, b = beta, w = gamma, start = c(-2, -10, 0.2), time = seq(0,50,by = 0.02), do.plot = T)
a = rossler(a = alpha, b = beta, w = gamma, start = c(-2, -10, 0.2), time = seq(0,1000,by = 0.02), do.plot = T)
a = rossler(a = alpha, b = beta, w = gamma, start = c(-2, -10, 0.2), time = seq(0,100,by = 0.02), do.plot = T)
rossler(a = alpha, b = beta, w = gamma, start = c(-2, -10, 0.2), time = seq(0,50,by = 0.02), do.plot = T)
rossler(a = alpha, b = beta, w = gamma, start = c(-2, -10, 0.2), time = seq(0,50,by = 0.02), do.plot = T)
a = rossler(nop = 2000, a = alpha, b = beta, w = gamma, start = c(-2, -10, 0.2), time = seq(0,50,by = 0.02), do.plot = T)
rossler
a = rossler(a = alpha, b = beta, w = gamma, start = c(-2, -10, 0.2), time = seq(0, 50, by = 0.01), do.plot = F)
reset()
a = rossler(a = alpha, b = beta, w = gamma, start = c(-2, -10, 0.2), time = seq(0, 50, by = 0.01), do.plot = F)
a = rossler()
a = rossler(a = alpha, b = beta, w = gamma, start = c(-2, -10, 0.2), time = seq(0, 50, by = 0.01))
a = rossler(a = alpha, b = beta, w = gamma, start = c(-2, -10, 0.2), time = seq(0, 50, by = 0.02))
a = rossler(a = alpha, b = beta, w = gamma, start = c(-2, -10, 0.2))
a = rossler(a = 0.2, b = 0.2, w = 5.7, start = c(-2, -10, 0.2), time = seq(0, 50, by = 0.01))
a = rossler(a = 0.2, b = 0.2, w = 5.7, start = c(-2, -10, 0.2), time = seq(0, 50, by = 0.02))
a = rossler(a = 0.2, b = 0.2, w = 5.7, start = c(-2, -10, 0.2), time = seq(0, 50, by = 0.04))
a = rossler(a = 0.2, b = 0.2, w = 5.7, start = c(-2, -10, 0.2), time = seq(0, 100, by = 0.02))
createRossler(timeInc = 0.01, onlyts = F, plot = T)
createRossler(nop = 2000, timeInc = 0.01, onlyts = F, plot = T)
createRossler(nop = 2000, timeInc = 0.02, onlyts = F, plot = T)
createRossler(nop = 2000, timeInc = 0.05, onlyts = F, plot = T)
createRossler(nop = 2000, timeInc = 0.01, onlyts = F, plot = T)
createLorenz(nop = 1000, timeInc = 0.01, onlyts = F, plot = T)
createLorenz(nop = 1000, timeInc = 0.04, onlyts = F, plot = T)
createLorenz(nop = 1000, timeInc = 0.04, onlyts = F, plot = T, tau = 20)
createLorenz(nop = 1000, timeInc = 0.04, onlyts = F, plot = T, tau = 10)
createLorenz(nop = 1000, timeInc = 0.04, onlyts = F, plot = T, tau = 20)
createLorenz(nop = 1000, timeInc = 0.01, onlyts = F, plot = T, tau = 20)
createLorenz(nop = 1000, timeInc = 0.05, onlyts = F, plot = T, tau = 20)
createLorenz(nop = 1000, timeInc = 0.05, onlyts = F, plot = T, tau = 40)
createLorenz(nop = 1000, timeInc = 0.04, onlyts = F, plot = T, tau = 20)
createLorenz(nop = 1000, timeInc = 0.02, onlyts = F, plot = T, tau = 20)
createLorenz(nop = 1000, timeInc = 0.01, onlyts = F, plot = T, tau = 20)
createLorenz(nop = 1000, timeInc = 0.04, onlyts = F, plot = T, tau = 50)
source('C:/Users/pagliosa/Dropbox/Work/Articles/Estimating Embedding Parameters using Neural Networks/R Codes/mlp.r')
createHenon()
createHenon(plot = T)
eval(createClifford())
View(createClifford)
View(createClifford)
createHenon(plot = T, save = T)
createLogistic(plot = T, onlyts = F, m = 2, tau = 1, save = T)
createHenon(plot = T, onlyts = F, m = 2, tau = 1, save = T)
View(myPlot)
View(myPlot)
source('~/Canon/R/utils.r')
createHenon(plot = T, onlyts = F, m = 2, tau = 1, save = T)
saveAllPaperIIDPlots()
a = createHenon()
length(a)
length(a$ts)
plot(a$ts)
plot(a$ts, type = "l")
